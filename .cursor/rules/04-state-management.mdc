---
description: 
globs: 
alwaysApply: true
---
# 状态管理指南

## 状态管理层次

1. **局部组件状态**
   - 用于 UI 特定状态
   - 使用 useState/useReducer 实现
   - 保持靠近使用位置

2. **共享状态**
   - 用于主题、认证等
   - 实现适当的 Provider 模式
   - Provider 保持在需要的最高层级

3. **全局状态**
   - 用于应用范围的状态
   - 实现适当的状态管理方案
   - 遵循单一数据源原则

## 最佳实践

1. 保持状态最小化和规范化
2. 使用适当的状态初始化
3. 实现适当的错误处理
4. 处理加载状态
5. 使用正确的 TypeScript 类型

## 状态更新

1. 使用不可变更新
2. 批量处理相关状态更新
3. 对派生状态使用函数式更新
4. 实现适当的清理
5. 处理竞态条件

## 性能考虑

1. 避免不必要的重渲染
2. 使用适当的记忆化
3. 实现适当的数据获取
4. 正确处理缓存
5. 使用适当的调试工具

## Context 指南

1. 保持 Context 聚焦且小巧
2. 使用适当的 Provider 模式
3. 实现适当的错误边界
4. 使用正确的 TypeScript 类型
5. 处理适当的清理
